What happens when you initialise a repository? Why do you need to do it?

It creates the git hidden folder which contains meta data about the
repository. It does not include any commits, you need to create the first
commit manually with an appropriate description.

I need to do it so that git knows about the files in the directory and can
track changes etc.

How is the staging area different from the working directory and the
repository? What value do you think it offers?

The staging area is for files that you want to track to be later commited to
the repository. The working directory contains all files in the currently
checked out version of the repository. The repository contains all versions.

How can you use the staging area to make sure you have one commit per logical
change?

You can simply stage only the files related to one logical change and then
commit only those changes, as opposed to all changes in the working
directory.

What are some situations when branches would be helpful in keeping your
history organised? How would branches help?

When you want to make a different version of the program, when you want to
test a feature, when you want to fix a bug separately from the master.

Branches help by separating the master from the other branches. They can each
apply their own commits without effecting each other. They can then later be
merged if desired.

How do the diagrams help you visualise the branch structure?

By allowing me to see where they veer off and also any unreachable commits.
They allow me to easily see the parent of each commit.

What is the result of merging two branches together? Why do we represent it 
in the diagram the way we do?

There is a new commit of the merge. All the parents of both branches are
accessible from this new commit. We represent it like that because it shows
what parents are accessible from the commit.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

Pros:
- save time by not having to do manual diffs every time and comparing
each and every file
- the more files the more time saved.

Cons:
- you have to go and fix the merges and delete the lines when there is a
conflict
- everything is merged and you may want to exclude some things.
