When would you want to use a remote repository rather than keeping all your work
local?

    When I want to share with other people, or simply backup my repository t
    the cloud.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    The automatic changes might overwrite your work when you don't want them
    to; it removes control.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks are like clones but they are done on GitHub only. They allow other
    GitHub users to clone a repository that they don't necessarily have
    access to modify themselves. They also include pointers to the
    original repository and vice versa for easy reference.
    
    Clones are done locally and from GitHub to local.
    
    Branches are different in that they are not copies of other branches
    but rather pointers to certain parent commits.

    You would use forking when cloning a GitHub repository that is public but
    read only, cloning when pulling your own GitHub repository, and branching
    when you want to make a different version of the program or test a
    feature without effecting the main branch.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    It allows you to compare the last known state and the local version while
    offline.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    By using some other version control system such as dropbox and using
    different folders to organise things.

    It would be easier to implement without understanding git. It would be
    harder to maintain such as merging files and to compare logical changes.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    When you want to have other people collaborate on those changes before
    comitting to the master branch (in addition to previously mentioned
    benefits).

    Using the master branch only is far easier as there's less work involved,
    but it doesn't allow for other people to first review the changes; no
    collaboration.
